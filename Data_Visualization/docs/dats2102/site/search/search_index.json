{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to Data Visualiztion for Data Science (DATS 2102) Weekly Modules Week 1 - Getting Started Data Sources Will be listed incrementally","title":"Home"},{"location":"#home","text":"Welcome to Data Visualiztion for Data Science (DATS 2102)","title":"Home"},{"location":"#weekly-modules","text":"Week 1 - Getting Started","title":"Weekly Modules"},{"location":"#data-sources","text":"Will be listed incrementally","title":"Data Sources"},{"location":"course_modules/","text":"DATS 2102 \u2014 Data Visualization for Data Science Week 1 \u2014 Getting Started Focus: Course introduction, importance of data visualization in data science, and environment setup. Learning Objectives: - Understand visualization\u2019s role in data analysis and communication. - Install Python, Jupyter, and core libraries. - Execute basic code and create markdown cells in Jupyter. - Produce first bar and scatter plots. Datasets: Seaborn penguins , small CSVs (population, GDP). Core Libraries: pandas, matplotlib, seaborn. Lecture Topics: - What is data visualization and why it matters. - Overview of course structure and expectations. - Introduction to JupyterLab workflow. In-Class Activities: Load dataset, inspect data, create bar and scatter plots. Homework: Set up environment, explore CSV, produce two labeled plots with captions. Week 2 \u2014 Language of Graphs Focus: Visual encodings, tidy data principles, grammar of graphics. Learning Objectives: - Identify and apply core visual encodings (position, color, shape, size). - Reshape data into tidy format. - Use seaborn and altair for multi-encoding charts. Datasets: Seaborn tips , Gapminder data. Core Libraries: pandas, seaborn, altair. Lecture Topics: - Mapping data to visual attributes. - Tidy data and why it matters. - Grammar of graphics overview. In-Class Activities: Reshape and plot categorical vs. numerical data. Homework: Create three visualizations using different encoding strategies, with explanations. Week 3 \u2014 Distributions & Variation Focus: Visualizing univariate distributions and variation. Learning Objectives: - Choose appropriate distribution plots. - Understand and apply binning, kernel density estimation, ECDF. Datasets: Flight delay data, iris dataset. Core Libraries: seaborn, matplotlib. Lecture Topics: - When to use histograms vs. KDEs vs. box/violin plots. - Understanding variability and spread. In-Class Activities: Compare multiple distribution plot types. Homework: Explore and visualize distributions in two datasets with narrative. Week 4 \u2014 Wrangling with pandas Focus: Data cleaning, transformation, and preparation for visualization. Learning Objectives: - Select, filter, group, summarize, and reshape data. - Work with datetime and categorical data. Datasets: NYC taxi trips sample, COVID-19 data. Core Libraries: pandas, matplotlib. Lecture Topics: - Data import and export. - Common data wrangling operations. In-Class Activities: Group data by category and visualize aggregates. Homework: Clean a messy dataset and create three informative charts. Week 5 \u2014 Perception & Principles Focus: Visual perception theory and chart design principles. Learning Objectives: - Apply Cleveland\u2013McGill perceptual rankings. - Recognize and fix misleading visualizations. Datasets: Simulated comparison datasets. Core Libraries: seaborn, matplotlib. Lecture Topics: - How humans perceive visual encodings. - Common design pitfalls. In-Class Activities: Redesign poor visualizations. Homework: Select a misleading chart, redesign it, and explain improvements. Week 6 \u2014 Comparisons Focus: Comparing categories, groups, and time series. Learning Objectives: - Create grouped bar charts, dot plots, slope charts. - Use small multiples effectively. Datasets: World Bank indicators. Core Libraries: seaborn, matplotlib, plotly. Lecture Topics: - Designing fair comparisons. - Aligning scales and baselines. In-Class Activities: Build comparison visuals using small multiples. Homework: Compare groups in chosen dataset using 2+ visualization types. Week 7 \u2014 Text, Labels, & Tables Focus: Enhancing visuals with annotations and well-formatted tables. Learning Objectives: - Apply direct labeling and meaningful captions. - Create clear and concise tables. Datasets: Sports statistics. Core Libraries: matplotlib, seaborn, pandas. Lecture Topics: - Annotating charts for storytelling. - Formatting tables for clarity. In-Class Activities: Annotate key data points in charts. Homework: Create a labeled and captioned visual from dataset of choice. Week 8 \u2014 Mapping I Focus: Fundamentals of geographic data visualization. Learning Objectives: - Create choropleth maps and understand coordinate reference systems. - Join spatial and tabular datasets. Datasets: US states shapefile, population data. Core Libraries: geopandas, mapclassify, folium. Lecture Topics: - Spatial joins. - Map classification schemes. In-Class Activities: Produce a choropleth map from joined datasets. Homework: Create thematic map for a real-world topic. Week 9 \u2014 Color & Accessibility Focus: Effective and inclusive color usage in visualization. Learning Objectives: - Choose appropriate color palettes. - Apply accessibility best practices. Datasets: From previous assignments. Core Libraries: seaborn, matplotlib, colorcet. Lecture Topics: - Sequential, diverging, qualitative palettes. - Colorblind-safe schemes. In-Class Activities: Recolor existing charts for better accessibility. Homework: Revise a prior visualization with improved color design. Week 10 \u2014 Relationships & Modeling Focus: Visualizing relationships and model fit. Learning Objectives: - Plot scatterplots with regression lines. - Visualize residuals and model diagnostics. Datasets: Housing prices dataset. Core Libraries: seaborn, statsmodels, matplotlib. Lecture Topics: - Visualizing correlation and causation. - Checking model assumptions visually. In-Class Activities: Fit and visualize a simple regression. Homework: Analyze and visualize a bivariate relationship with commentary. Week 11 \u2014 Uncertainty Focus: Representing uncertainty in data visualizations. Learning Objectives: - Add error bars and confidence intervals. - Visualize sampling variability. Datasets: Polling data. Core Libraries: seaborn, matplotlib. Lecture Topics: - Why uncertainty matters. - Techniques for communicating uncertainty. In-Class Activities: Compare plots with and without uncertainty intervals. Homework: Visualize uncertainty in selected dataset. Week 12 \u2014 Visualization for ML/NLP Focus: Visualizing machine learning and NLP outputs. Learning Objectives: - Plot feature importance, confusion matrices, and ROC curves. - Visualize topic clusters and word clouds. Datasets: IMDB reviews, classification dataset. Core Libraries: scikit-learn, matplotlib, seaborn, wordcloud, bertopic. Lecture Topics: - Visualization in the ML workflow. - Visualizing high-dimensional data. In-Class Activities: Train a small model, visualize predictions. Homework: Create three ML-related visualizations from a chosen dataset. Weeks 13\u201314 \u2014 Final Project Workshops Focus: Final project preparation, peer review, and refinement. Learning Objectives: - Integrate multiple visualization techniques into one narrative. - Polish charts for professional presentation. Datasets: Student-chosen. In-Class Activities: Peer feedback, troubleshooting, improving visuals. Homework: Finalize and submit project with report and reproducible code.","title":"Modules"},{"location":"course_modules/#dats-2102-data-visualization-for-data-science","text":"","title":"DATS 2102 \u2014 Data Visualization for Data Science"},{"location":"course_modules/#week-1-getting-started","text":"Focus: Course introduction, importance of data visualization in data science, and environment setup. Learning Objectives: - Understand visualization\u2019s role in data analysis and communication. - Install Python, Jupyter, and core libraries. - Execute basic code and create markdown cells in Jupyter. - Produce first bar and scatter plots. Datasets: Seaborn penguins , small CSVs (population, GDP). Core Libraries: pandas, matplotlib, seaborn. Lecture Topics: - What is data visualization and why it matters. - Overview of course structure and expectations. - Introduction to JupyterLab workflow. In-Class Activities: Load dataset, inspect data, create bar and scatter plots. Homework: Set up environment, explore CSV, produce two labeled plots with captions.","title":"Week 1 \u2014 Getting Started"},{"location":"course_modules/#week-2-language-of-graphs","text":"Focus: Visual encodings, tidy data principles, grammar of graphics. Learning Objectives: - Identify and apply core visual encodings (position, color, shape, size). - Reshape data into tidy format. - Use seaborn and altair for multi-encoding charts. Datasets: Seaborn tips , Gapminder data. Core Libraries: pandas, seaborn, altair. Lecture Topics: - Mapping data to visual attributes. - Tidy data and why it matters. - Grammar of graphics overview. In-Class Activities: Reshape and plot categorical vs. numerical data. Homework: Create three visualizations using different encoding strategies, with explanations.","title":"Week 2 \u2014 Language of Graphs"},{"location":"course_modules/#week-3-distributions-variation","text":"Focus: Visualizing univariate distributions and variation. Learning Objectives: - Choose appropriate distribution plots. - Understand and apply binning, kernel density estimation, ECDF. Datasets: Flight delay data, iris dataset. Core Libraries: seaborn, matplotlib. Lecture Topics: - When to use histograms vs. KDEs vs. box/violin plots. - Understanding variability and spread. In-Class Activities: Compare multiple distribution plot types. Homework: Explore and visualize distributions in two datasets with narrative.","title":"Week 3 \u2014 Distributions &amp; Variation"},{"location":"course_modules/#week-4-wrangling-with-pandas","text":"Focus: Data cleaning, transformation, and preparation for visualization. Learning Objectives: - Select, filter, group, summarize, and reshape data. - Work with datetime and categorical data. Datasets: NYC taxi trips sample, COVID-19 data. Core Libraries: pandas, matplotlib. Lecture Topics: - Data import and export. - Common data wrangling operations. In-Class Activities: Group data by category and visualize aggregates. Homework: Clean a messy dataset and create three informative charts.","title":"Week 4 \u2014 Wrangling with pandas"},{"location":"course_modules/#week-5-perception-principles","text":"Focus: Visual perception theory and chart design principles. Learning Objectives: - Apply Cleveland\u2013McGill perceptual rankings. - Recognize and fix misleading visualizations. Datasets: Simulated comparison datasets. Core Libraries: seaborn, matplotlib. Lecture Topics: - How humans perceive visual encodings. - Common design pitfalls. In-Class Activities: Redesign poor visualizations. Homework: Select a misleading chart, redesign it, and explain improvements.","title":"Week 5 \u2014 Perception &amp; Principles"},{"location":"course_modules/#week-6-comparisons","text":"Focus: Comparing categories, groups, and time series. Learning Objectives: - Create grouped bar charts, dot plots, slope charts. - Use small multiples effectively. Datasets: World Bank indicators. Core Libraries: seaborn, matplotlib, plotly. Lecture Topics: - Designing fair comparisons. - Aligning scales and baselines. In-Class Activities: Build comparison visuals using small multiples. Homework: Compare groups in chosen dataset using 2+ visualization types.","title":"Week 6 \u2014 Comparisons"},{"location":"course_modules/#week-7-text-labels-tables","text":"Focus: Enhancing visuals with annotations and well-formatted tables. Learning Objectives: - Apply direct labeling and meaningful captions. - Create clear and concise tables. Datasets: Sports statistics. Core Libraries: matplotlib, seaborn, pandas. Lecture Topics: - Annotating charts for storytelling. - Formatting tables for clarity. In-Class Activities: Annotate key data points in charts. Homework: Create a labeled and captioned visual from dataset of choice.","title":"Week 7 \u2014 Text, Labels, &amp; Tables"},{"location":"course_modules/#week-8-mapping-i","text":"Focus: Fundamentals of geographic data visualization. Learning Objectives: - Create choropleth maps and understand coordinate reference systems. - Join spatial and tabular datasets. Datasets: US states shapefile, population data. Core Libraries: geopandas, mapclassify, folium. Lecture Topics: - Spatial joins. - Map classification schemes. In-Class Activities: Produce a choropleth map from joined datasets. Homework: Create thematic map for a real-world topic.","title":"Week 8 \u2014 Mapping I"},{"location":"course_modules/#week-9-color-accessibility","text":"Focus: Effective and inclusive color usage in visualization. Learning Objectives: - Choose appropriate color palettes. - Apply accessibility best practices. Datasets: From previous assignments. Core Libraries: seaborn, matplotlib, colorcet. Lecture Topics: - Sequential, diverging, qualitative palettes. - Colorblind-safe schemes. In-Class Activities: Recolor existing charts for better accessibility. Homework: Revise a prior visualization with improved color design.","title":"Week 9 \u2014 Color &amp; Accessibility"},{"location":"course_modules/#week-10-relationships-modeling","text":"Focus: Visualizing relationships and model fit. Learning Objectives: - Plot scatterplots with regression lines. - Visualize residuals and model diagnostics. Datasets: Housing prices dataset. Core Libraries: seaborn, statsmodels, matplotlib. Lecture Topics: - Visualizing correlation and causation. - Checking model assumptions visually. In-Class Activities: Fit and visualize a simple regression. Homework: Analyze and visualize a bivariate relationship with commentary.","title":"Week 10 \u2014 Relationships &amp; Modeling"},{"location":"course_modules/#week-11-uncertainty","text":"Focus: Representing uncertainty in data visualizations. Learning Objectives: - Add error bars and confidence intervals. - Visualize sampling variability. Datasets: Polling data. Core Libraries: seaborn, matplotlib. Lecture Topics: - Why uncertainty matters. - Techniques for communicating uncertainty. In-Class Activities: Compare plots with and without uncertainty intervals. Homework: Visualize uncertainty in selected dataset.","title":"Week 11 \u2014 Uncertainty"},{"location":"course_modules/#week-12-visualization-for-mlnlp","text":"Focus: Visualizing machine learning and NLP outputs. Learning Objectives: - Plot feature importance, confusion matrices, and ROC curves. - Visualize topic clusters and word clouds. Datasets: IMDB reviews, classification dataset. Core Libraries: scikit-learn, matplotlib, seaborn, wordcloud, bertopic. Lecture Topics: - Visualization in the ML workflow. - Visualizing high-dimensional data. In-Class Activities: Train a small model, visualize predictions. Homework: Create three ML-related visualizations from a chosen dataset.","title":"Week 12 \u2014 Visualization for ML/NLP"},{"location":"course_modules/#weeks-1314-final-project-workshops","text":"Focus: Final project preparation, peer review, and refinement. Learning Objectives: - Integrate multiple visualization techniques into one narrative. - Polish charts for professional presentation. Datasets: Student-chosen. In-Class Activities: Peer feedback, troubleshooting, improving visuals. Homework: Finalize and submit project with report and reproducible code.","title":"Weeks 13\u201314 \u2014 Final Project Workshops"},{"location":"syllabus/","text":"DATS 2102: Data Visualization for Data Science Instructor : Junjun Yin Email : j.yin@gwu.edu Semester : Fall 2025 Dates : 08/25/25 \u2013 12/08/25 Class Time : Tuesday & Thursday Office Hours : (Details in Blackboard) Office Location : 2036 H St NW, Room 309 Course Description This course introduces students to the core principles and practices of data visualization within the context of data science. Students will learn how to collect, process, analyze, and communicate data-driven insights using effective and ethical visualization techniques. Emphasis will be placed on hands-on programming with Python\u2019s visualization ecosystem ( pandas , matplotlib , seaborn , plotly , altair , geopandas ) and applying best practices for clarity, accuracy, and storytelling. The course will cover visualization theory, design principles, and practical skills, including geographic data mapping and visualizing results from machine learning models. By the end of the semester, students will be able to produce high-quality visualizations that effectively communicate data insights to diverse audiences. Course Prerequisites DATS 1001 and STAT 1051/1053/1111/1127, or permission of the instructor. Learning Outcomes As a result of completing this course, students will be able to: 1. Process and tidy real-world data using pandas . 2. Apply visual perception and design principles to create truthful, clear graphics. 3. Visualize univariate, bivariate, and multivariate patterns; compare groups effectively. 4. Map and analyze geographic data using geopandas , contextily , and folium / plotly . 5. Visualize relationships and communicate model context and uncertainty. 6. Build interactive, annotated visuals and simple data stories/dashboards. 7. Apply visualization to ML & NLP tasks (feature importance, confusion matrices/ROC, word clouds, BERTopic topic maps, embedding plots). Course Workload This is a 3-credit course. Students are expected to engage in 2.5 hours of direct instruction and a minimum of 5 hours of independent learning each week, for a combined minimum total of 7.5 hours per week or 112.5 hours over the semester. Required Tools and Texts Tools : Anaconda (or Python 3.10+), JupyterLab, VS Code, Sublime Text, PyCharm, Google Colab, or other tools that support Python programming and visualization. Core Libraries : pandas, numpy, matplotlib, seaborn, altair, plotly, geopandas, mapclassify, contextily, folium, scikit-learn, umap-learn, sentence-transformers, bertopic, wordcloud. Documentation & Guides : - Matplotlib - Seaborn - Plotly - Altair - GeoPandas - Pandas Texts : No required textbook. Recommended: Fundamentals of Data Visualization by Claus O. Wilke (available free online) and Storytelling with Data by Cole Nussbaumer Knaflic. Weekly Topics & Schedule Week Topic Description 1 Getting Started Python setup, Jupyter, pandas basics, first plot with matplotlib. 2 Language of Graphs Encodings, tidy data, seaborn & altair grammar. 3 Distributions & Variation Hist/KDE/violin/ECDF, binning & outliers. 4 Wrangling with pandas select/filter/mutate/groupby/merge, reshape, dates. 5 Perception & Principles Cleveland\u2013McGill, preattentive features, clutter. 6 Comparisons Bars/dots/small multiples, ordering & baselines, log scales. 7 Text, Labels, & Tables Direct labeling, captions, tables. 8 Mapping I Choropleths, CRS, spatial joins, geopandas, mapclassify, folium. 9 Color & Accessibility Sequential/diverging/qualitative palettes, pitfalls. 10 Relationships & Modeling Scatter/line, smoothing, statsmodels, model checks. 11 Uncertainty Error bars, intervals, bootstrap visuals. 12 Visualization for ML/NLP Feature importance, confusion/ROC-PR, word clouds, BERTopic, UMAP embeddings. 13\u201314 Final Project Workshops Scoping, refinement, narrative. Assignments & Grading Assignment Weight Weekly Notebooks & Exercises 40% Mid-Semester Visualization Project 15% Final Project 25% Participation & Peer Feedback 10% Quizzes (2 total) 10% Final Project The final project will synthesize the skills learned throughout the course. Students will: - Propose a project idea by Week 9. - Develop a prototype by Week 13. - Submit the final project by December 8. Requirements: - Multiple well-designed visualizations with an accompanying narrative. - At least one map or ML/NLP visualization. - Accessibility considerations (color choice, labeling, alt text). - A reproducible Jupyter Notebook and any necessary datasets or data sources. Projects will be graded on clarity, creativity, technical proficiency, and adherence to visualization best practices. University Policies Academic Integrity Code Academic integrity is an essential part of the educational process, and all members of the GW community take these matters very seriously. As the instructor of record for this course, my role is to provide clear expectations and uphold them in all assessments. Violations of academic integrity occur when students fail to cite research sources properly, engage in unauthorized collaboration, falsify data, and otherwise violate the Code of Academic Integrity. If you have any questions about whether particular academic practices or resources are permitted, you should ask me for clarification. If you are reported for an academic integrity violation, you should contact Conflict Education and Student Accountability (CESA) to learn more about your rights and options. Consequences can range from failure of assignment to expulsion from the University and may include a transcript notation. More info: students.gwu.edu/code-academic-integrity or cesa@gwu.edu. University policy on observance of religious holidays Students must notify faculty during the first week of the semester, or as early as possible, but no later than three weeks prior to the absence, of their intention to be absent for religious observance. See details at provost.gwu.edu/policies-procedures-and-guidelines . Use of Electronic Course Materials and Class Recordings Students are encouraged to use electronic course materials for private personal use in connection with their academic program of study. These materials should not be shared or used for non-course related purposes unless express permission is granted by the instructor. Academic Support Academic Commons Academic Commons is the central location for academic support resources for GW students. To schedule a peer tutoring session for a variety of courses visit go.gwu.edu/tutoring . Visit academiccommons.gwu.edu for study skills tips, finding help with research, and connecting with other campus resources. For questions email academiccommons@gwu.edu. GW Writing Center GW Writing Center cultivates confident writers in the University community by facilitating collaborative, critical, and inclusive conversations at all stages of the writing process. Working alongside peer mentors, writers develop strategies to write independently in academic and public settings. Appointments can be booked online at gwu.mywconline.com . Disability Support Services (DSS) Any student who may need an accommodation based on the potential impact of a disability should contact Disability Support Services at disabilitysupport.gwu.edu to establish eligibility and coordinate reasonable accommodations. Student Health Center The Student Health Center (SHC) offers medical, counseling/psychological, and psychiatric services to GW students. More information about the SHC is available at healthcenter.gwu.edu . Students experiencing a medical or mental health emergency on campus should contact GW Emergency Services at 202-994-6111, or off campus at 911. GW Campus Emergency Information GW Emergency Services : 202-994-6111 For situation-specific instructions, refer to GW\u2019s Emergency Procedures guide. GW Alert GW Alert is an emergency notification system that sends alerts to the GW community. GW requests students, faculty, and staff maintain current contact information by logging on to alert.gwu.edu . Alerts are sent via email, text, social media, and other means, including the Guardian app. Protective Actions GW prescribes four protective actions that can be issued by university officials depending on the type of emergency. All GW community members are expected to follow directions according to the specified protective action: Shelter, Evacuate, Secure, and Lockdown. Learn more at safety.gwu.edu/gw-standard-emergency-statuses .","title":"Syllabus"},{"location":"syllabus/#dats-2102-data-visualization-for-data-science","text":"Instructor : Junjun Yin Email : j.yin@gwu.edu Semester : Fall 2025 Dates : 08/25/25 \u2013 12/08/25 Class Time : Tuesday & Thursday Office Hours : (Details in Blackboard) Office Location : 2036 H St NW, Room 309","title":"DATS 2102: Data Visualization for Data Science"},{"location":"syllabus/#course-description","text":"This course introduces students to the core principles and practices of data visualization within the context of data science. Students will learn how to collect, process, analyze, and communicate data-driven insights using effective and ethical visualization techniques. Emphasis will be placed on hands-on programming with Python\u2019s visualization ecosystem ( pandas , matplotlib , seaborn , plotly , altair , geopandas ) and applying best practices for clarity, accuracy, and storytelling. The course will cover visualization theory, design principles, and practical skills, including geographic data mapping and visualizing results from machine learning models. By the end of the semester, students will be able to produce high-quality visualizations that effectively communicate data insights to diverse audiences.","title":"Course Description"},{"location":"syllabus/#course-prerequisites","text":"DATS 1001 and STAT 1051/1053/1111/1127, or permission of the instructor.","title":"Course Prerequisites"},{"location":"syllabus/#learning-outcomes","text":"As a result of completing this course, students will be able to: 1. Process and tidy real-world data using pandas . 2. Apply visual perception and design principles to create truthful, clear graphics. 3. Visualize univariate, bivariate, and multivariate patterns; compare groups effectively. 4. Map and analyze geographic data using geopandas , contextily , and folium / plotly . 5. Visualize relationships and communicate model context and uncertainty. 6. Build interactive, annotated visuals and simple data stories/dashboards. 7. Apply visualization to ML & NLP tasks (feature importance, confusion matrices/ROC, word clouds, BERTopic topic maps, embedding plots).","title":"Learning Outcomes"},{"location":"syllabus/#course-workload","text":"This is a 3-credit course. Students are expected to engage in 2.5 hours of direct instruction and a minimum of 5 hours of independent learning each week, for a combined minimum total of 7.5 hours per week or 112.5 hours over the semester.","title":"Course Workload"},{"location":"syllabus/#required-tools-and-texts","text":"Tools : Anaconda (or Python 3.10+), JupyterLab, VS Code, Sublime Text, PyCharm, Google Colab, or other tools that support Python programming and visualization. Core Libraries : pandas, numpy, matplotlib, seaborn, altair, plotly, geopandas, mapclassify, contextily, folium, scikit-learn, umap-learn, sentence-transformers, bertopic, wordcloud. Documentation & Guides : - Matplotlib - Seaborn - Plotly - Altair - GeoPandas - Pandas Texts : No required textbook. Recommended: Fundamentals of Data Visualization by Claus O. Wilke (available free online) and Storytelling with Data by Cole Nussbaumer Knaflic.","title":"Required Tools and Texts"},{"location":"syllabus/#weekly-topics-schedule","text":"Week Topic Description 1 Getting Started Python setup, Jupyter, pandas basics, first plot with matplotlib. 2 Language of Graphs Encodings, tidy data, seaborn & altair grammar. 3 Distributions & Variation Hist/KDE/violin/ECDF, binning & outliers. 4 Wrangling with pandas select/filter/mutate/groupby/merge, reshape, dates. 5 Perception & Principles Cleveland\u2013McGill, preattentive features, clutter. 6 Comparisons Bars/dots/small multiples, ordering & baselines, log scales. 7 Text, Labels, & Tables Direct labeling, captions, tables. 8 Mapping I Choropleths, CRS, spatial joins, geopandas, mapclassify, folium. 9 Color & Accessibility Sequential/diverging/qualitative palettes, pitfalls. 10 Relationships & Modeling Scatter/line, smoothing, statsmodels, model checks. 11 Uncertainty Error bars, intervals, bootstrap visuals. 12 Visualization for ML/NLP Feature importance, confusion/ROC-PR, word clouds, BERTopic, UMAP embeddings. 13\u201314 Final Project Workshops Scoping, refinement, narrative.","title":"Weekly Topics &amp; Schedule"},{"location":"syllabus/#assignments-grading","text":"Assignment Weight Weekly Notebooks & Exercises 40% Mid-Semester Visualization Project 15% Final Project 25% Participation & Peer Feedback 10% Quizzes (2 total) 10%","title":"Assignments &amp; Grading"},{"location":"syllabus/#final-project","text":"The final project will synthesize the skills learned throughout the course. Students will: - Propose a project idea by Week 9. - Develop a prototype by Week 13. - Submit the final project by December 8. Requirements: - Multiple well-designed visualizations with an accompanying narrative. - At least one map or ML/NLP visualization. - Accessibility considerations (color choice, labeling, alt text). - A reproducible Jupyter Notebook and any necessary datasets or data sources. Projects will be graded on clarity, creativity, technical proficiency, and adherence to visualization best practices.","title":"Final Project"},{"location":"syllabus/#university-policies","text":"Academic Integrity Code Academic integrity is an essential part of the educational process, and all members of the GW community take these matters very seriously. As the instructor of record for this course, my role is to provide clear expectations and uphold them in all assessments. Violations of academic integrity occur when students fail to cite research sources properly, engage in unauthorized collaboration, falsify data, and otherwise violate the Code of Academic Integrity. If you have any questions about whether particular academic practices or resources are permitted, you should ask me for clarification. If you are reported for an academic integrity violation, you should contact Conflict Education and Student Accountability (CESA) to learn more about your rights and options. Consequences can range from failure of assignment to expulsion from the University and may include a transcript notation. More info: students.gwu.edu/code-academic-integrity or cesa@gwu.edu. University policy on observance of religious holidays Students must notify faculty during the first week of the semester, or as early as possible, but no later than three weeks prior to the absence, of their intention to be absent for religious observance. See details at provost.gwu.edu/policies-procedures-and-guidelines . Use of Electronic Course Materials and Class Recordings Students are encouraged to use electronic course materials for private personal use in connection with their academic program of study. These materials should not be shared or used for non-course related purposes unless express permission is granted by the instructor.","title":"University Policies"},{"location":"syllabus/#academic-support","text":"Academic Commons Academic Commons is the central location for academic support resources for GW students. To schedule a peer tutoring session for a variety of courses visit go.gwu.edu/tutoring . Visit academiccommons.gwu.edu for study skills tips, finding help with research, and connecting with other campus resources. For questions email academiccommons@gwu.edu. GW Writing Center GW Writing Center cultivates confident writers in the University community by facilitating collaborative, critical, and inclusive conversations at all stages of the writing process. Working alongside peer mentors, writers develop strategies to write independently in academic and public settings. Appointments can be booked online at gwu.mywconline.com . Disability Support Services (DSS) Any student who may need an accommodation based on the potential impact of a disability should contact Disability Support Services at disabilitysupport.gwu.edu to establish eligibility and coordinate reasonable accommodations. Student Health Center The Student Health Center (SHC) offers medical, counseling/psychological, and psychiatric services to GW students. More information about the SHC is available at healthcenter.gwu.edu . Students experiencing a medical or mental health emergency on campus should contact GW Emergency Services at 202-994-6111, or off campus at 911.","title":"Academic Support"},{"location":"syllabus/#gw-campus-emergency-information","text":"GW Emergency Services : 202-994-6111 For situation-specific instructions, refer to GW\u2019s Emergency Procedures guide. GW Alert GW Alert is an emergency notification system that sends alerts to the GW community. GW requests students, faculty, and staff maintain current contact information by logging on to alert.gwu.edu . Alerts are sent via email, text, social media, and other means, including the Guardian app. Protective Actions GW prescribes four protective actions that can be issued by university officials depending on the type of emergency. All GW community members are expected to follow directions according to the specified protective action: Shelter, Evacuate, Secure, and Lockdown. Learn more at safety.gwu.edu/gw-standard-emergency-statuses .","title":"GW Campus Emergency Information"},{"location":"weekly/module_week_1_getting_started/","text":"Week 1 \u2014 Getting Started A Quarto/Panel-style module page for DATS 2102, implemented in Python/Jupyter. \ud83d\udcd6 Background & Motivation Data visualization is the bridge between raw data and human understanding. In data science, visualizations are not just decorative \u2014 they are powerful analytical tools that help reveal patterns, outliers, and trends that might remain hidden in tables or statistical summaries. Well-designed visualizations can: Tell compelling, evidence-based stories that influence decision-making. Make complex concepts easier to grasp for diverse audiences. Identify and expose errors or inconsistencies in data during the exploratory stage. Enable collaboration between technical and non-technical stakeholders. Applications span across domains: Public health: Tracking disease spread with interactive dashboards. Climate science: Mapping temperature anomalies over decades. Business analytics: Visualizing customer behavior or sales performance. Machine learning: Understanding model performance through ROC curves, feature importance charts, or clustering visualizations. As data science projects grow in size and complexity, the ability to craft clear, truthful, and impactful visuals becomes as important as building the models themselves. \ud83d\udd0e Learning Objectives Set up a reliable Python environment for data visualization. Navigate Jupyter Notebook/Lab and basic notebook hygiene (headings, code vs. markdown, restart & run all). Load and inspect tabular data with pandas . Produce the first charts with matplotlib and seaborn . \ud83d\udcda Readings & Resources JupyterLab User Guide Python Tutorial Pandas Matplotlib Pyplot Seaborn Tutorials Sample Data Sources for Practice: Seaborn Built-in Datasets Kaggle Datasets FiveThirtyEight Data Our World in Data Open Data DC UCI Machine Learning Repository data.gov GeoPandas Sample Datasets Social Explorer \ud83d\udee0\ufe0f Setup Checklist Install Anaconda or Miniconda. Create/activate environment: bash conda create -n dataviz python=3.12 -y conda activate dataviz Install libraries (CPU-friendly baseline): bash pip install pandas numpy matplotlib seaborn plotly altair geopandas Launch JupyterLab : bash jupyter lab (Optional) IDEs you can use: VS Code, PyCharm, Sublime Text; or run in Google Colab. Troubleshooting If geopandas fails on Windows, try conda install -c conda-forge geopandas . If Jupyter can\u2019t see the env, run: python -m ipykernel install --user --name dataviz --display-name \"Python (dataviz)\" . \ud83e\udded Lecture Outline Session 1 (75 minutes) Course overview & syllabus tour (15 min) Why visualization in data science? (truthfulness, clarity, audience) (15 min) Environment setup: conda + Jupyter walkthrough, troubleshooting (30 min) First dataset in pandas : load CSV \u2192 DataFrame \u2192 quick EDA (15 min) Session 2 (75 minutes) Recap + Q&A on environment setup (10 min) Notebook workflow: cells, markdown, restart & run all, saving (20 min) Basic plotting: matplotlib bar/line; seaborn scatter/histogram (30 min) Guided practice with penguins dataset: scatterplot, pairplot activity (15 min) \ud83d\udcbb Starter Notebook Snippets Load a tiny dataset import pandas as pd cities = pd.DataFrame({ \"city\": [\"DC\", \"NY\", \"LA\", \"Chicago\", \"Houston\"], \"population\": [712_816, 8_336_817, 3_898_747, 2_746_388, 2_304_580] }) cities.head() First charts (matplotlib \u2192 seaborn) import matplotlib.pyplot as plt import seaborn as sns # Matplotlib bar chart plt.bar(cities[\"city\"], cities[\"population\"]) plt.title(\"Population by City\") plt.xlabel(\"City\"); plt.ylabel(\"Population\") plt.show() # Seaborn bar chart sns.barplot(data=cities, x=\"city\", y=\"population\") plt.title(\"Population by City (Seaborn)\") plt.show() Quick EDA helpers cities.describe(include=\"all\") print(\"Missing values by column:\\n\", cities.isna().sum()) \ud83e\uddea In-Class Activity Using seaborn.load_dataset(\"penguins\") : Make a scatterplot of flipper_length_mm vs body_mass_g colored by species . Add axis labels, a title, and a legend with a better title. Try a seaborn.pairplot to see relationships across multiple variables. Hints penguins = sns.load_dataset(\"penguins\").dropna() ax = sns.scatterplot(data=penguins, x=\"flipper_length_mm\", y=\"body_mass_g\", hue=\"species\") ax.set(title=\"Penguins: Flipper vs Body Mass\", xlabel=\"Flipper length (mm)\", ylabel=\"Body mass (g)\") \ud83c\udfe0 Homework (Due before Week 2) Set up your environment and confirm you can open/run notebooks. Import a CSV of your choice and submit one notebook that includes: A short markdown description of the dataset (source, what, who, when). Top 5 rows, .info() , and .describe() . One bar or histogram plot, and one scatter plot. A brief paragraph reflecting on one insight + one limitation of the data. Export notebook to HTML ( File \u2192 Save and Export Notebook As ) and upload both .ipynb and .html . Rubric (10 pts) Reproducible environment & clean notebook structure (2) Correct loading/inspection & basic EDA (3) Two charts with sensible labels/titles (3) Insight + limitation reflection (2) \ud83e\udde9 Optional Extensions Try the same chart in both matplotlib and seaborn ; note the pros/cons you observe. Install altair (a declarative statistical visualization library for Python, built on top of Vega-Lite, useful for creating interactive charts with minimal code) and create the same scatterplot with tooltips. If you\u2019re comfortable with maps, test your geopandas install ( geopandas.datasets.get_path('naturalearth_lowres') ). \u2705 Submission Checklist This section, for example, lists everything you should verify before submitting your work for Week 1.","title":"Week 1 \u2014 Getting Started"},{"location":"weekly/module_week_1_getting_started/#week-1-getting-started","text":"A Quarto/Panel-style module page for DATS 2102, implemented in Python/Jupyter.","title":"Week 1 \u2014 Getting Started"},{"location":"weekly/module_week_1_getting_started/#background-motivation","text":"Data visualization is the bridge between raw data and human understanding. In data science, visualizations are not just decorative \u2014 they are powerful analytical tools that help reveal patterns, outliers, and trends that might remain hidden in tables or statistical summaries. Well-designed visualizations can: Tell compelling, evidence-based stories that influence decision-making. Make complex concepts easier to grasp for diverse audiences. Identify and expose errors or inconsistencies in data during the exploratory stage. Enable collaboration between technical and non-technical stakeholders. Applications span across domains: Public health: Tracking disease spread with interactive dashboards. Climate science: Mapping temperature anomalies over decades. Business analytics: Visualizing customer behavior or sales performance. Machine learning: Understanding model performance through ROC curves, feature importance charts, or clustering visualizations. As data science projects grow in size and complexity, the ability to craft clear, truthful, and impactful visuals becomes as important as building the models themselves.","title":"\ud83d\udcd6 Background &amp; Motivation"},{"location":"weekly/module_week_1_getting_started/#learning-objectives","text":"Set up a reliable Python environment for data visualization. Navigate Jupyter Notebook/Lab and basic notebook hygiene (headings, code vs. markdown, restart & run all). Load and inspect tabular data with pandas . Produce the first charts with matplotlib and seaborn .","title":"\ud83d\udd0e Learning Objectives"},{"location":"weekly/module_week_1_getting_started/#readings-resources","text":"JupyterLab User Guide Python Tutorial Pandas Matplotlib Pyplot Seaborn Tutorials Sample Data Sources for Practice: Seaborn Built-in Datasets Kaggle Datasets FiveThirtyEight Data Our World in Data Open Data DC UCI Machine Learning Repository data.gov GeoPandas Sample Datasets Social Explorer","title":"\ud83d\udcda Readings &amp; Resources"},{"location":"weekly/module_week_1_getting_started/#setup-checklist","text":"Install Anaconda or Miniconda. Create/activate environment: bash conda create -n dataviz python=3.12 -y conda activate dataviz Install libraries (CPU-friendly baseline): bash pip install pandas numpy matplotlib seaborn plotly altair geopandas Launch JupyterLab : bash jupyter lab (Optional) IDEs you can use: VS Code, PyCharm, Sublime Text; or run in Google Colab. Troubleshooting If geopandas fails on Windows, try conda install -c conda-forge geopandas . If Jupyter can\u2019t see the env, run: python -m ipykernel install --user --name dataviz --display-name \"Python (dataviz)\" .","title":"\ud83d\udee0\ufe0f Setup Checklist"},{"location":"weekly/module_week_1_getting_started/#lecture-outline","text":"","title":"\ud83e\udded Lecture Outline"},{"location":"weekly/module_week_1_getting_started/#session-1-75-minutes","text":"Course overview & syllabus tour (15 min) Why visualization in data science? (truthfulness, clarity, audience) (15 min) Environment setup: conda + Jupyter walkthrough, troubleshooting (30 min) First dataset in pandas : load CSV \u2192 DataFrame \u2192 quick EDA (15 min)","title":"Session 1 (75 minutes)"},{"location":"weekly/module_week_1_getting_started/#session-2-75-minutes","text":"Recap + Q&A on environment setup (10 min) Notebook workflow: cells, markdown, restart & run all, saving (20 min) Basic plotting: matplotlib bar/line; seaborn scatter/histogram (30 min) Guided practice with penguins dataset: scatterplot, pairplot activity (15 min)","title":"Session 2 (75 minutes)"},{"location":"weekly/module_week_1_getting_started/#starter-notebook-snippets","text":"","title":"\ud83d\udcbb Starter Notebook Snippets"},{"location":"weekly/module_week_1_getting_started/#load-a-tiny-dataset","text":"import pandas as pd cities = pd.DataFrame({ \"city\": [\"DC\", \"NY\", \"LA\", \"Chicago\", \"Houston\"], \"population\": [712_816, 8_336_817, 3_898_747, 2_746_388, 2_304_580] }) cities.head()","title":"Load a tiny dataset"},{"location":"weekly/module_week_1_getting_started/#first-charts-matplotlib-seaborn","text":"import matplotlib.pyplot as plt import seaborn as sns # Matplotlib bar chart plt.bar(cities[\"city\"], cities[\"population\"]) plt.title(\"Population by City\") plt.xlabel(\"City\"); plt.ylabel(\"Population\") plt.show() # Seaborn bar chart sns.barplot(data=cities, x=\"city\", y=\"population\") plt.title(\"Population by City (Seaborn)\") plt.show()","title":"First charts (matplotlib \u2192 seaborn)"},{"location":"weekly/module_week_1_getting_started/#quick-eda-helpers","text":"cities.describe(include=\"all\") print(\"Missing values by column:\\n\", cities.isna().sum())","title":"Quick EDA helpers"},{"location":"weekly/module_week_1_getting_started/#in-class-activity","text":"Using seaborn.load_dataset(\"penguins\") : Make a scatterplot of flipper_length_mm vs body_mass_g colored by species . Add axis labels, a title, and a legend with a better title. Try a seaborn.pairplot to see relationships across multiple variables. Hints penguins = sns.load_dataset(\"penguins\").dropna() ax = sns.scatterplot(data=penguins, x=\"flipper_length_mm\", y=\"body_mass_g\", hue=\"species\") ax.set(title=\"Penguins: Flipper vs Body Mass\", xlabel=\"Flipper length (mm)\", ylabel=\"Body mass (g)\")","title":"\ud83e\uddea In-Class Activity"},{"location":"weekly/module_week_1_getting_started/#homework-due-before-week-2","text":"Set up your environment and confirm you can open/run notebooks. Import a CSV of your choice and submit one notebook that includes: A short markdown description of the dataset (source, what, who, when). Top 5 rows, .info() , and .describe() . One bar or histogram plot, and one scatter plot. A brief paragraph reflecting on one insight + one limitation of the data. Export notebook to HTML ( File \u2192 Save and Export Notebook As ) and upload both .ipynb and .html . Rubric (10 pts) Reproducible environment & clean notebook structure (2) Correct loading/inspection & basic EDA (3) Two charts with sensible labels/titles (3) Insight + limitation reflection (2)","title":"\ud83c\udfe0 Homework (Due before Week 2)"},{"location":"weekly/module_week_1_getting_started/#optional-extensions","text":"Try the same chart in both matplotlib and seaborn ; note the pros/cons you observe. Install altair (a declarative statistical visualization library for Python, built on top of Vega-Lite, useful for creating interactive charts with minimal code) and create the same scatterplot with tooltips. If you\u2019re comfortable with maps, test your geopandas install ( geopandas.datasets.get_path('naturalearth_lowres') ).","title":"\ud83e\udde9 Optional Extensions"},{"location":"weekly/module_week_1_getting_started/#submission-checklist","text":"This section, for example, lists everything you should verify before submitting your work for Week 1.","title":"\u2705 Submission Checklist"}]}